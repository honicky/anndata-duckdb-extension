name: Release Extension
on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  # Find the most recent successful build from main branch
  find-run:
    name: Find Latest Build
    runs-on: ubuntu-latest
    outputs:
      run-id: ${{ steps.find-run.outputs.run-id }}
    steps:
      - name: Find successful run from main
        id: find-run
        uses: actions/github-script@v6
        with:
          script: |
            // Get the commit SHA that this tag points to
            const tagRef = context.ref;
            const tag = tagRef.replace('refs/tags/', '');
            
            // Get tag info to find the commit SHA
            const { data: tagData } = await github.rest.git.getRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `tags/${tag}`
            });
            
            const commitSha = tagData.object.sha;
            console.log(`Tag ${tag} points to commit ${commitSha}`);
            
            // Find workflow runs for this commit
            const { data: runs } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'MainDistributionPipeline.yml',
              head_sha: commitSha,
              status: 'success',
              per_page: 1
            });
            
            if (runs.workflow_runs.length === 0) {
              // If no run found for exact commit, get the latest successful run from main
              const { data: mainRuns } = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'MainDistributionPipeline.yml',
                branch: 'main',
                status: 'success',
                per_page: 1
              });
              
              if (mainRuns.workflow_runs.length === 0) {
                core.setFailed('No successful build found');
                return;
              }
              
              const runId = mainRuns.workflow_runs[0].id;
              console.log(`Using latest main build: ${runId}`);
              core.setOutput('run-id', runId);
            } else {
              const runId = runs.workflow_runs[0].id;
              console.log(`Found build for commit: ${runId}`);
              core.setOutput('run-id', runId);
            }

  # Deploy the already-built artifacts
  deploy:
    name: Deploy Extension
    needs: find-run
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Download artifacts from build
        uses: actions/download-artifact@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ needs.find-run.outputs.run-id }}
          path: ./artifacts
      
      - name: Display artifacts
        run: |
          echo "Downloaded artifacts:"
          find ./artifacts -type f -name "*.duckdb_extension*" | head -20
      
      # Add S3 deployment here if you have AWS credentials
      # For now, artifacts are available through GitHub Actions
      
      - name: Note about deployment
        run: |
          echo "Build artifacts from run ${{ needs.find-run.outputs.run-id }} are ready"
          echo "Without AWS credentials, skipping S3 deployment"
          echo "Artifacts will be included in GitHub release"

  # Create GitHub release with artifacts
  release:
    name: Create GitHub Release  
    needs: find-run
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Get version from tag
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      - name: Download artifacts from build
        uses: actions/download-artifact@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ needs.find-run.outputs.run-id }}
          path: ./artifacts
      
      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          
          # Find all extension files
          find ./artifacts -name "*.duckdb_extension*" -type f | while read file; do
            # Get just the filename
            filename=$(basename "$file")
            # Copy to release directory
            cp "$file" "release-assets/${filename}"
          done
          
          echo "Release assets:"
          ls -la release-assets/
      
      - name: Generate release notes
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          # Extract changelog section
          if [ -f CHANGELOG.md ]; then
            awk "/## \[${VERSION}\]/{flag=1; next} /## \[/{flag=0} flag" CHANGELOG.md > notes.md || echo "" > notes.md
          else
            echo "" > notes.md
          fi
          
          # Add installation instructions
          cat >> notes.md << 'EOF'
          
          ## Installation
          
          Download the appropriate `.duckdb_extension` file for your platform below.
          
          ```sql
          -- Start DuckDB with unsigned extensions
          duckdb -unsigned
          
          -- Load the extension
          LOAD 'path/to/anndata.duckdb_extension';
          
          -- Verify installation
          SELECT anndata_version();
          ```
          
          ## Platform Support
          
          Extensions are built for:
          - Linux (x64, ARM64)
          - macOS (Intel, Apple Silicon)
          - Windows (x64)
          - WebAssembly
          
          See the [README](https://github.com/${{ github.repository }}) for detailed usage instructions.
          EOF
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release v${{ steps.version.outputs.version }}
          body_path: notes.md
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-rc') || contains(steps.version.outputs.version, '-beta') || contains(steps.version.outputs.version, '-alpha') }}
          files: release-assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
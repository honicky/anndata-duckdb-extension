name: Auto Release on Version Change

on:
  push:
    branches: [main]
    paths:
      - 'VERSION'
  workflow_run:
    workflows: ["Main Extension Distribution Pipeline"]
    types:
      - completed
    branches:
      - main

jobs:
  check-version-and-release:
    name: Auto-create release if version changed
    runs-on: ubuntu-latest
    # Only run if triggered by successful build or direct VERSION change
    if: |
      (github.event_name == 'push' && contains(github.event.head_commit.message, 'bump version')) ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history to check tags
      
      - name: Check if version needs release
        id: check
        run: |
          # Get current version from VERSION file
          CURRENT_VERSION=$(cat VERSION)
          echo "Current version: $CURRENT_VERSION"
          
          # Check if tag already exists
          if git rev-parse "v${CURRENT_VERSION}" >/dev/null 2>&1; then
            echo "Tag v${CURRENT_VERSION} already exists"
            echo "needs_release=false" >> $GITHUB_OUTPUT
          else
            echo "Tag v${CURRENT_VERSION} does not exist, will create release"
            echo "needs_release=true" >> $GITHUB_OUTPUT
            echo "version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
          fi
      
      - name: Wait for build to complete
        if: steps.check.outputs.needs_release == 'true' && github.event_name == 'push'
        uses: actions/github-script@v6
        with:
          script: |
            const maxAttempts = 20;
            const delayMs = 30000; // 30 seconds
            
            for (let attempt = 1; attempt <= maxAttempts; attempt++) {
              console.log(`Attempt ${attempt}: Checking for successful build...`);
              
              const { data: runs } = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'MainDistributionPipeline.yml',
                branch: 'main',
                per_page: 5
              });
              
              // Find a successful run for this commit
              const successfulRun = runs.workflow_runs.find(run => 
                run.head_sha === context.sha && 
                run.status === 'completed' && 
                run.conclusion === 'success'
              );
              
              if (successfulRun) {
                console.log(`Found successful build: ${successfulRun.id}`);
                core.setOutput('build_run_id', successfulRun.id);
                return;
              }
              
              // Check if there's a running build
              const runningBuild = runs.workflow_runs.find(run => 
                run.head_sha === context.sha && 
                run.status === 'in_progress'
              );
              
              if (runningBuild) {
                console.log(`Build still in progress: ${runningBuild.id}`);
              } else {
                console.log('No build found for this commit yet');
              }
              
              if (attempt < maxAttempts) {
                console.log(`Waiting ${delayMs/1000} seconds before retry...`);
                await new Promise(resolve => setTimeout(resolve, delayMs));
              }
            }
            
            core.setFailed('Build did not complete successfully within timeout');
      
      - name: Create tag
        if: steps.check.outputs.needs_release == 'true'
        run: |
          VERSION="${{ steps.check.outputs.version }}"
          
          # Configure git
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # Create annotated tag
          git tag -a "v${VERSION}" -m "Release version ${VERSION}

          Auto-generated from VERSION file change
          
          See CHANGELOG.md for details"
          
          # Push tag
          git push origin "v${VERSION}"
      
      - name: Get build artifacts
        if: steps.check.outputs.needs_release == 'true'
        id: artifacts
        uses: actions/github-script@v6
        with:
          script: |
            // Get the build run ID (either from wait step or from workflow_run event)
            let runId;
            if (context.eventName === 'workflow_run') {
              runId = context.payload.workflow_run.id;
            } else {
              // Find the successful build for this commit
              const { data: runs } = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'MainDistributionPipeline.yml',
                branch: 'main',
                head_sha: context.sha,
                status: 'success',
                per_page: 1
              });
              
              if (runs.workflow_runs.length === 0) {
                core.setFailed('No successful build found');
                return;
              }
              runId = runs.workflow_runs[0].id;
            }
            
            console.log(`Using build artifacts from run: ${runId}`);
            core.setOutput('run_id', runId);
      
      - name: Download artifacts
        if: steps.check.outputs.needs_release == 'true'
        uses: actions/download-artifact@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ steps.artifacts.outputs.run_id }}
          path: ./artifacts
      
      - name: Prepare release assets
        if: steps.check.outputs.needs_release == 'true'
        run: |
          mkdir -p release-assets
          find ./artifacts -name "*.duckdb_extension*" -type f | while read file; do
            filename=$(basename "$file")
            cp "$file" "release-assets/${filename}"
          done
          
          echo "Release assets:"
          ls -la release-assets/
      
      - name: Generate release notes
        if: steps.check.outputs.needs_release == 'true'
        run: |
          VERSION="${{ steps.check.outputs.version }}"
          
          # Extract changelog section
          if [ -f CHANGELOG.md ]; then
            awk "/## \[${VERSION}\]/{flag=1; next} /## \[/{flag=0} flag" CHANGELOG.md > notes.md || echo "Release ${VERSION}" > notes.md
          else
            echo "Release ${VERSION}" > notes.md
          fi
          
          # Add installation instructions
          cat >> notes.md << 'EOF'
          
          ## Installation
          
          Download the appropriate `.duckdb_extension` file for your platform:
          
          ```sql
          duckdb -unsigned
          LOAD 'path/to/anndata.duckdb_extension';
          ```
          
          See the [README](https://github.com/${{ github.repository }}) for usage instructions.
          EOF
      
      - name: Create GitHub Release
        if: steps.check.outputs.needs_release == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.check.outputs.version }}
          name: Release v${{ steps.check.outputs.version }}
          body_path: notes.md
          draft: false
          prerelease: ${{ contains(steps.check.outputs.version, '-rc') || contains(steps.check.outputs.version, '-beta') || contains(steps.check.outputs.version, '-alpha') }}
          files: release-assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
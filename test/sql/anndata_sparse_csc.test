# name: test/sql/anndata_sparse_csc.test
# description: Test CSC sparse matrix support in AnnData extension
# group: [sql]

# Require statement will ensure this test is run with this extension loaded
require anndata

# Test reading CSC sparse X matrix - should return wide format with genes as columns
query I
SELECT COUNT(*) FROM anndata_scan_x('test/data/test_sparse_csc.h5ad');
----
10

# Test that we have the correct number of columns (obs_idx + 20 genes)
query I
SELECT COUNT(*) FROM (
    SELECT * FROM anndata_scan_x('test/data/test_sparse_csc.h5ad') LIMIT 1
) t;
----
1

# Test first observation has gene expression values (most should be 0 due to sparsity)
query II
SELECT obs_idx, Gene_000 IS NOT NULL as has_value
FROM anndata_scan_x('test/data/test_sparse_csc.h5ad')
WHERE obs_idx = 0;
----
0	true

# Test that CSC sparse values are correctly returned
# Since the matrix is 90% sparse, most values should be 0
query I
SELECT COUNT(*) 
FROM (
    SELECT obs_idx,
           Gene_000, Gene_001, Gene_002, Gene_003, Gene_004
    FROM anndata_scan_x('test/data/test_sparse_csc.h5ad')
    WHERE obs_idx = 0
) t;
----
1

# Test joining CSC sparse X with obs metadata
query II
SELECT o.obs_idx, o.cell_type
FROM anndata_scan_obs('test/data/test_sparse_csc.h5ad') o
JOIN anndata_scan_x('test/data/test_sparse_csc.h5ad') x 
  ON o.obs_idx = x.obs_idx
WHERE o.obs_idx < 3
ORDER BY o.obs_idx;
----
0	TypeA
1	TypeA
2	TypeA

# Verify that CSC and CSR formats produce the same results
# KNOWN LIMITATION: Cannot join two different HDF5 files due to thread safety limitations
# Workaround: Use temporary tables to cache data from each file separately

# First, load CSR data into a temporary table
statement ok
CREATE TEMPORARY TABLE csr_data AS 
SELECT obs_idx, ROUND(Gene_008, 2) as g8, ROUND(Gene_009, 2) as g9
FROM anndata_scan_x('test/data/test_sparse.h5ad')
WHERE obs_idx IN (0, 2, 5);

# Then, load CSC data into another temporary table
statement ok
CREATE TEMPORARY TABLE csc_data AS
SELECT obs_idx, ROUND(Gene_008, 2) as g8, ROUND(Gene_009, 2) as g9
FROM anndata_scan_x('test/data/test_sparse_csc.h5ad')
WHERE obs_idx IN (0, 2, 5);

# Now we can safely compare the results
query I
SELECT COUNT(*) 
FROM csr_data r 
JOIN csc_data c ON r.obs_idx = c.obs_idx
WHERE r.g8 = c.g8 AND r.g9 = c.g9;
----
3

# Clean up temporary tables
statement ok
DROP TABLE csr_data;

statement ok
DROP TABLE csc_data;
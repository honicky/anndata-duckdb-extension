# name: test/sql/anndata_basic.test
# description: Test basic AnnData extension functionality
# group: [sql]

# Before we load the extension, this will fail
statement error
SELECT * FROM anndata_scan_obs('test/data/test_small.h5ad');
----
Catalog Error: Table Function with name anndata_scan_obs does not exist!

# Require statement will ensure this test is run with this extension loaded
require anndata

# Test reading observation metadata
query I
SELECT COUNT(*) FROM anndata_scan_obs('test/data/test_small.h5ad');
----
100

# Test reading variable metadata
query I
SELECT COUNT(*) FROM anndata_scan_var('test/data/test_small.h5ad');
----
50

# Test column names in obs table - should have obs_idx as first column
query I
SELECT COUNT(*) FROM (
    SELECT * FROM anndata_scan_obs('test/data/test_small.h5ad') LIMIT 1
) t WHERE t.obs_idx IS NOT NULL AND t.n_genes IS NOT NULL;
----
1

# Test column names in var table
query I
SELECT COUNT(*) FROM (
    SELECT * FROM anndata_scan_var('test/data/test_small.h5ad') LIMIT 1
) t WHERE t.gene_id IS NOT NULL;
----
1

# Test reading X matrix - should return one row per observation
query I
SELECT COUNT(*) FROM anndata_scan_x('test/data/test_small.h5ad');
----
100

# Test first observation has gene expression values
query II
SELECT obs_idx, Gene_000 IS NOT NULL as has_value
FROM anndata_scan_x('test/data/test_small.h5ad')
LIMIT 1;
----
0	true

# Test selecting specific genes by column name
query I
SELECT COUNT(*) FROM anndata_scan_x('test/data/test_small.h5ad')
WHERE obs_idx < 3;
----
3

# Test joining obs and X tables on obs_idx
query II
SELECT o.obs_idx, COUNT(*) as cnt
FROM anndata_scan_obs('test/data/test_small.h5ad') o
JOIN anndata_scan_x('test/data/test_small.h5ad') x 
  ON o.obs_idx = x.obs_idx
WHERE o.obs_idx < 3
GROUP BY o.obs_idx
ORDER BY o.obs_idx;
----
0	1
1	1
2	1

# Test using custom var column for gene names
# Default (_index/var_names) gives Gene_000, Gene_001, etc.
# Using 'gene_id' parameter gives ENSG00000000000, ENSG00000000001, etc.
query I
SELECT COUNT(*) 
FROM anndata_scan_x('test/data/test_small.h5ad', 'gene_id')
WHERE obs_idx = 0;
----
1

# Verify gene_id column names are used (ENSG format) instead of default gene_name
query II
SELECT obs_idx, ENSG00000000000 IS NOT NULL as has_ensembl_column
FROM anndata_scan_x('test/data/test_small.h5ad', 'gene_id')
WHERE obs_idx = 0;
----
0	true

# Verify default uses gene_name (Gene_XXX format)
query II
SELECT obs_idx, Gene_000 IS NOT NULL as has_default_column
FROM anndata_scan_x('test/data/test_small.h5ad')
WHERE obs_idx = 0;
----
0	true

# Test anndata_info function returns table with property/value columns
query II
SELECT COUNT(*) as num_properties, COUNT(DISTINCT property) as unique_properties
FROM anndata_info('test/data/test_small.h5ad');
----
7	7

# Test basic properties are present in info
query II
SELECT property, value
FROM anndata_info('test/data/test_small.h5ad')
WHERE property IN ('n_obs', 'n_vars')
ORDER BY property;
----
n_obs	100
n_vars	50

# Test file_path property
query I
SELECT value
FROM anndata_info('test/data/test_small.h5ad')
WHERE property = 'file_path';
----
test/data/test_small.h5ad

# Test x_shape property
query I
SELECT value
FROM anndata_info('test/data/test_small.h5ad')
WHERE property = 'x_shape';
----
100 x 50

# Test x_sparse property
query I
SELECT value
FROM anndata_info('test/data/test_small.h5ad')
WHERE property = 'x_sparse';
----
false